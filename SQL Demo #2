-- Challenge 1 - Retrieve data from one or more tables- use zagi
-- Marketing needs a list of customers and what product they have purchased
-- which also shows category name and vendor name for that product.  To do this:
-- Create a query that returns customername, productname, categoryname, vendorname
-- order the list by customer name
-- Your list should contain 9 items
SELECT customername, productname, categoryname, vendorname
FROM zagi.customer cu, zagi.product p, zagi.category ct, zagi.vendor v, zagi.includes i, zagi.salestransaction s
WHERE cu.customerid=s.customerid
	AND s.tid=i.tid
	AND i.productid=p.productid
	AND p.categoryid=ct.categoryid
  AND p.vendorid=v.vendorid
ORDER BY customername;




-- Challenge 2 - Retrieve data from one or more tables - outer join- use hafh
-- Write three separate queries that return the bulding id, apartment number and corporate client name:
-- Which apartments have no corporate clients currently leasing them?
SELECT buildingid, aptno AS apartment_number, ccname AS corp_client_name
FROM hafh.apartment a
	LEFT JOIN corpclient c
    ON a.ccid=c.ccid;
-- ANSWER: Apartment Number 41 in Building B1 and Apartment Number 31 in B2 currently have no corporate clients leasing them.


-- Which corporate clients are currently not leasing any appartments?
SELECT buildingid, aptno AS apartment_number, ccname AS corp_client_name
FROM hafh.corpclient c
	LEFT JOIN apartment a
    ON c.ccid=a.ccid;
-- ANSWER: SouthAlps is a corporate client not currently leasing any apartments.


-- A list that combines the two above queries - a full outer join
	SELECT buildingid, aptno AS apartment_number, ccname AS corp_client_name
	FROM hafh.apartment a
		LEFT JOIN corpclient c
		ON a.ccid=c.ccid
UNION
	SELECT buildingid, aptno AS apartment_number, ccname AS corp_client_name
	FROM hafh.corpclient c
		LEFT JOIN apartment a
		ON c.ccid=a.ccid;


-- Challenge 3 - Summary queries - use my_guitar_shop
-- Write a SELECT statement that answers this question: What is the total quantity 
-- purchased for each product within each category? Return these columns:
-- The category_name column from the category table
-- The product_name column from the products table
-- The total quantity purchased for each product with orders in the Order_Items table
-- Use the WITH ROLLUP operator to include rows that give a summary for each 
-- category name as well as a row that gives the grand total.
-- Use the IF and GROUPING functions to replace null values in the category_name 
-- and product_name columns with literal values if theyâ€™re for summary rows. 
SELECT IF(GROUPING(category_name) = 1, 'GRAND TOTAL', category_name) AS category_name,
	IF(GROUPING(product_name) = 1, 'CATEGORY ORDERED TOTAL', product_name) AS product_name, 
    SUM(quantity) as total_quantity
FROM categories c 
	JOIN products p
		ON c.category_id=p.category_id
    JOIN order_items o
		ON p.product_id=o.product_id
GROUP BY category_name, product_name WITH ROLLUP;
    

-- Challenge 4 - Summary queries - use my_guitar_shop
-- Write a SELECT statement that uses an aggregate window function to get the total 
-- amount of each order. Return these columns:
-- The order_id column from the Order_Items table
-- The total amount for each order item in the Order_Items table (Hint: You can 
-- calculate the total amount by subtracting the discount amount from the item 
-- price and then multiplying it by the quantity)
-- The total amount for each order
-- Sort the result set in ascending sequence by the order_id column.
SELECT order_id, SUM((item_price - discount_amount) * quantity) OVER(PARTITION BY item_id) AS item_total_amount, 
	SUM((item_price - discount_amount) * quantity) OVER(PARTITION BY order_id) AS total_order_amount
FROM order_items
ORDER BY order_id;


-- Challenge 5 - Summary queries - use my_guitar_shop
-- Modify the solution to exercise Challenge 4 so the column that contains the total amount for 
-- each order contains a cumulative total by item amount.
-- Add another column to the SELECT statement that uses an aggregate window 
-- function to get the average item amount for each order.
-- Modify the SELECT statement so it uses a named window for the two aggregate 
-- functions.
SELECT order_id, (item_price - discount_amount) * quantity AS item_amount, 
SUM((item_price - discount_amount) * quantity) OVER (order_window ORDER BY item_id) AS cumulative_total_amount,
AVG((item_price - discount_amount) * quantity) OVER (order_window) AS item_average_by_order
FROM order_items
WINDOW order_window AS (PARTITION BY order_id)
ORDER BY order_id;

-- Challenge 6 - Summary queries - use my_guitar_shop
-- Write a SELECT statement that uses aggregate window functions to calculate the 
-- order total for each customer and the order total for each customer by date. Return 
-- these columns:
-- The customer_id column from the Orders table
-- The order_date column from the Orders table
-- The total amount for each order item in the Order_Items table
-- The sum of the order totals for each customer
-- The sum of the order totals for each customer by date (Hint: You can create a 
-- peer group to get these values)
SELECT customer_id, order_date, (item_price - discount_amount) * quantity AS item_amount, 
SUM((item_price - discount_amount) * quantity) OVER (PARTITION BY customer_id) AS customer_order_total, 
SUM((item_price - discount_amount) * quantity) OVER (PARTITION BY customer_id, order_date) AS date_total
FROM orders o
	JOIN order_items oi 
		ON o.order_id=oi.order_id
ORDER BY customer_id, order_date;
